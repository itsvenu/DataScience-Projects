wh <- range(wh, ignore.strand = TRUE)
plt_npm1_gene <- autoplot(Homo.sapiens, which = wh, fill = "black")+
theme_classic(base_size = 18)+
theme(axis.text = element_text(color = "black"))
plt_npm1_gene
wh
170814708 + 5000
plt_npm1_gene +
geom_vline(xintercept = 170819708)
pdf("NPM1_geneStructure.pdf", height = 4, width = 6)
plt_npm1_gene +
geom_vline(xintercept = 170819708)
dev.off()
pdf("NPM1_geneStructure.pdf", height = 4, width = 10)
plt_npm1_gene +
geom_vline(xintercept = 170819708)
dev.off()
remove.packages("ISMB2019")
q()
library(ISMB2019)
devtools::install_github("itsvenu/ISMB2019")
library(ISMB2019)
data("ismb_dat2019")
get_tweets(my_day = "2019-07-25", start_time = "8:00", end_time = "10:00")
library(magrittr)
get_tweets(my_day = "2019-07-25", start_time = "8:00", end_time = "10:00")
ismb_dat2019 %>% gead
ismb_dat2019 %>% head
ismb_dat2019$screen_name %>% unique() %>% length
dim(ismb_dat2019)
get_tweets(my_day = "2019-07-25", start_time = "8:00", end_time = "10:00")
get_tweets(my_day = "2019-07-25", start_time = "8:00", end_time = "10:00")
q()
q()
library(ALPS)
fpath <- system.file("extdata/bw", "VISITOR_example_datatable.txt", package="ALPS")
fpath
q()
library(ALPS)
q()
library(ALPS)
system.file("extdata", "ALPS_example_datatable.txt", package = "ALPS")
system.file("extdata", "ALPS_example_datatable.txt", package = "ALPS", mustWork = TRUE)
system.file("extdata", "ALPS_example_datatable.txt", package = "ALPS")
q()
library(ALPS)
system.file("extdata", "ALPS_example_datatable.txt", package = "ALPS")
remove.packages("ALPS")
.libPaths()
q()
q()
.libPaths()
q()
q()
par_fun <- function(x){
x_bw <- bwL[[x]]
x_res <- rtracklayer::summary(x_bw, peaks_gr, type = summary_type) %>%
as.data.frame() %>%
dplyr::mutate(region = paste(seqnames, start, end, sep = "_")) %>%
tibble::column_to_rownames(var = "region") %>%
dplyr::select(score) %>%
dplyr::rename(!!x := score)
return(x_res)
}
multiBigwig_summary2 <- function(data_table = NULL, peaks_df = NULL,
summary_type = "mean",
parallel = TRUE){
assertthat::assert_that(!is.null(data_table), msg = "Please provide `data_table`")
assertthat::assert_that(assertthat::has_name(data_table, "bw_path"))
assertthat::assert_that(assertthat::has_name(data_table, "sample_id"))
assertthat::assert_that(!is.null(peaks_df), msg = "Please provide `peaks_df`")
peaks_df$V2 <- as.numeric(peaks_df$V2)
peaks_df$V3 <- as.numeric(peaks_df$V3)
## peaks gr
peaks_gr <- GenomicRanges::makeGRangesFromDataFrame(peaks_df, seqnames.field = "V1", start.field = "V2", end.field = "V3", keep.extra.columns = FALSE)
## bw list
all_bw_files <- data_table$bw_path %>% as.character()
names(all_bw_files) <- data_table$sample_id %>% as.character()
bwL <- rtracklayer::BigWigFileList(all_bw_files)
if(parallel){
all_pid <- bwL %>% names
all_pid_reslst <- parallel::mclapply(all_pid, par_fun)
count_mat <- all_pid_reslst %>% as.data.frame() %>%
tibble::rownames_to_column(var = "region") %>%
tidyr::separate(region, into = c("chr", "start", "end"))
} else {
count_mat <- peaks_df %>% dplyr::mutate(region = paste(V1, V2, V3, sep = "_")) %>%
dplyr::select(region)
for(i in 1:length(bwL)){
sample_id <- bwL[i] %>% names
sample_path <- bwL[[i]]
sample_res <- summary(sample_path, peaks_gr, type = summary_type) %>%
as.data.frame() %>%
dplyr::mutate(region = paste(seqnames, start, end, sep = "_")) %>%
dplyr::select(region, score) %>%
dplyr::rename(!!sample_id := score)
suppressMessages(count_mat <- dplyr::left_join(count_mat, sample_res, by = "region") %>%
tidyr::separate(region, into = c("chr", "start", "end")))
}
}
return(count_mat)
}
chr21_bw_zip <- system.file("extdata/bw/", "chr21.bw.tar.gz", package = "ALPS", mustWork = TRUE)
## untar into the current working dir under 'test_chr21'
untar(chr21_bw_zip, exdir = "~/Desktop/test_chr21")
chr21_data_table <- system.file("extdata/bw", "ALPS_example_datatable.txt", package = "ALPS", mustWork = TRUE)
chr21_data_table <- read.delim(chr21_data_table, header = TRUE)
chr21_data_table$bw_path <- paste0("~/Desktop/test_chr21/", chr21_data_table$bw_path)
chr21_bed <- system.file("extdata/bw", "ALPS_ACCx_example_GenomicRegions.bed", package = "ALPS", mustWork = TRUE)
chr21_bed <- read.delim(chr21_bed, header = FALSE)
multiBigwig_summary2(data_table = chr21_data_table,
peaks_df = chr21_bed,
summary_type = "mean",
parallel = TRUE) %>% head
library(magrittr)
multiBigwig_summary2(data_table = chr21_data_table,
peaks_df = chr21_bed,
summary_type = "mean",
parallel = TRUE) %>% head
data_table = chr21_data_table
peaks_df = chr21_bed
summary_type = "mean"
data_table %>% head
peaks_df %>% head
assertthat::assert_that(!is.null(data_table), msg = "Please provide `data_table`")
assertthat::assert_that(assertthat::has_name(data_table, "bw_path"))
assertthat::assert_that(assertthat::has_name(data_table, "sample_id"))
assertthat::assert_that(!is.null(peaks_df), msg = "Please provide `peaks_df`")
peaks_df$V2 <- as.numeric(peaks_df$V2)
peaks_df$V3 <- as.numeric(peaks_df$V3)
## peaks gr
peaks_gr <- GenomicRanges::makeGRangesFromDataFrame(peaks_df, seqnames.field = "V1", start.field = "V2", end.field = "V3", keep.extra.columns = FALSE)
all_bw_files <- data_table$bw_path %>% as.character()
names(all_bw_files) <- data_table$sample_id %>% as.character()
bwL <- rtracklayer::BigWigFileList(all_bw_files)
all_pid <- bwL %>% names
all_pid_reslst <- parallel::mclapply(all_pid, par_fun)
count_mat <- all_pid_reslst %>% as.data.frame() %>%
tibble::rownames_to_column(var = "region") %>%
tidyr::separate(region, into = c("chr", "start", "end"))
multiBigwig_summary2 <- function(data_table = NULL, peaks_df = NULL,
summary_type = "mean",
parallel = TRUE){
assertthat::assert_that(!is.null(data_table), msg = "Please provide `data_table`")
assertthat::assert_that(assertthat::has_name(data_table, "bw_path"))
assertthat::assert_that(assertthat::has_name(data_table, "sample_id"))
assertthat::assert_that(!is.null(peaks_df), msg = "Please provide `peaks_df`")
peaks_df$V2 <- as.numeric(peaks_df$V2)
peaks_df$V3 <- as.numeric(peaks_df$V3)
## peaks gr
peaks_gr <- GenomicRanges::makeGRangesFromDataFrame(peaks_df, seqnames.field = "V1", start.field = "V2", end.field = "V3", keep.extra.columns = FALSE)
## bw list
all_bw_files <- data_table$bw_path %>% as.character()
names(all_bw_files) <- data_table$sample_id %>% as.character()
bwL <- rtracklayer::BigWigFileList(all_bw_files)
if(parallel){
all_pid <- bwL %>% names
all_pid_reslst <- parallel::mclapply(all_pid, par_fun)
count_mat <- all_pid_reslst %>% as.data.frame() %>%
tibble::rownames_to_column(var = "region") %>%
tidyr::separate(region, into = c("chr", "start", "end"))
} else {
count_mat <- peaks_df %>% dplyr::mutate(region = paste(V1, V2, V3, sep = "_")) %>%
dplyr::select(region)
for(i in 1:length(bwL)){
sample_id <- bwL[i] %>% names
sample_path <- bwL[[i]]
sample_res <- summary(sample_path, peaks_gr, type = summary_type) %>%
as.data.frame() %>%
dplyr::mutate(region = paste(seqnames, start, end, sep = "_")) %>%
dplyr::select(region, score) %>%
dplyr::rename(!!sample_id := score)
suppressMessages(count_mat <- dplyr::left_join(count_mat, sample_res, by = "region") %>%
tidyr::separate(region, into = c("chr", "start", "end")))
}
}
return(count_mat)
}
multiBigwig_summary2(data_table = chr21_data_table,
peaks_df = chr21_bed,
summary_type = "mean",
parallel = TRUE) %>% head
multiBigwig_summary2(data_table = chr21_data_table,
peaks_df = chr21_bed,
summary_type = "mean",
parallel = TRUE) %>% head
q()
par_fun <- function(x){
x_bw <- bwL[[x]]
x_res <- rtracklayer::summary(x_bw, peaks_gr, type = summary_type) %>%
as.data.frame() %>%
dplyr::mutate(region = paste(seqnames, start, end, sep = "_")) %>%
tibble::column_to_rownames(var = "region") %>%
dplyr::select(score) %>%
dplyr::rename(!!x := score)
return(x_res)
}
multiBigwig_summary2 <- function(data_table = NULL, peaks_df = NULL,
summary_type = "mean",
parallel = TRUE){
assertthat::assert_that(!is.null(data_table), msg = "Please provide `data_table`")
assertthat::assert_that(assertthat::has_name(data_table, "bw_path"))
assertthat::assert_that(assertthat::has_name(data_table, "sample_id"))
assertthat::assert_that(!is.null(peaks_df), msg = "Please provide `peaks_df`")
peaks_df$V2 <- as.numeric(peaks_df$V2)
peaks_df$V3 <- as.numeric(peaks_df$V3)
## peaks gr
peaks_gr <- GenomicRanges::makeGRangesFromDataFrame(peaks_df, seqnames.field = "V1", start.field = "V2", end.field = "V3", keep.extra.columns = FALSE)
## bw list
all_bw_files <- data_table$bw_path %>% as.character()
names(all_bw_files) <- data_table$sample_id %>% as.character()
bwL <- rtracklayer::BigWigFileList(all_bw_files)
if(parallel){
all_pid <- bwL %>% names
all_pid_reslst <- parallel::mclapply(all_pid, par_fun)
count_mat <- all_pid_reslst %>% as.data.frame() %>%
tibble::rownames_to_column(var = "region") %>%
tidyr::separate(region, into = c("chr", "start", "end"))
} else {
count_mat <- peaks_df %>% dplyr::mutate(region = paste(V1, V2, V3, sep = "_")) %>%
dplyr::select(region)
for(i in 1:length(bwL)){
sample_id <- bwL[i] %>% names
sample_path <- bwL[[i]]
sample_res <- summary(sample_path, peaks_gr, type = summary_type) %>%
as.data.frame() %>%
dplyr::mutate(region = paste(seqnames, start, end, sep = "_")) %>%
dplyr::select(region, score) %>%
dplyr::rename(!!sample_id := score)
suppressMessages(count_mat <- dplyr::left_join(count_mat, sample_res, by = "region") %>%
tidyr::separate(region, into = c("chr", "start", "end")))
}
}
return(count_mat)
}
chr21_bw_zip <- system.file("extdata/bw/", "chr21.bw.tar.gz", package = "ALPS", mustWork = TRUE)
## untar into the current working dir under 'test_chr21'
untar(chr21_bw_zip, exdir = "~/Desktop/test_chr21")
chr21_data_table <- system.file("extdata/bw", "ALPS_example_datatable.txt", package = "ALPS", mustWork = TRUE)
chr21_data_table <- read.delim(chr21_data_table, header = TRUE)
chr21_data_table$bw_path <- paste0("~/Desktop/test_chr21/", chr21_data_table$bw_path)
chr21_bed <- system.file("extdata/bw", "ALPS_ACCx_example_GenomicRegions.bed", package = "ALPS", mustWork = TRUE)
chr21_bed <- read.delim(chr21_bed, header = FALSE)
library(magrittr)
multiBigwig_summary2(data_table = chr21_data_table,
peaks_df = chr21_bed,
summary_type = "mean",
parallel = TRUE) %>% head
q()
multiBigwig_summary2 <- function(data_table = NULL, peaks_df = NULL,
summary_type = "mean",
parallel = TRUE){
assertthat::assert_that(!is.null(data_table), msg = "Please provide `data_table`")
assertthat::assert_that(assertthat::has_name(data_table, "bw_path"))
assertthat::assert_that(assertthat::has_name(data_table, "sample_id"))
assertthat::assert_that(!is.null(peaks_df), msg = "Please provide `peaks_df`")
peaks_df$V2 <- as.numeric(peaks_df$V2)
peaks_df$V3 <- as.numeric(peaks_df$V3)
## peaks gr
peaks_gr <- GenomicRanges::makeGRangesFromDataFrame(peaks_df, seqnames.field = "V1", start.field = "V2", end.field = "V3", keep.extra.columns = FALSE)
## bw list
all_bw_files <- data_table$bw_path %>% as.character()
names(all_bw_files) <- data_table$sample_id %>% as.character()
bwL <- rtracklayer::BigWigFileList(all_bw_files)
if(parallel){
par_fun <- function(x){
x_bw <- bwL[[x]]
x_res <- rtracklayer::summary(x_bw, peaks_gr, type = summary_type) %>%
as.data.frame() %>%
dplyr::mutate(region = paste(seqnames, start, end, sep = "_")) %>%
tibble::column_to_rownames(var = "region") %>%
dplyr::select(score) %>%
dplyr::rename(!!x := score)
return(x_res)
}
all_pid <- bwL %>% names
all_pid_reslst <- parallel::mclapply(all_pid, par_fun)
count_mat <- all_pid_reslst %>% as.data.frame() %>%
tibble::rownames_to_column(var = "region") %>%
tidyr::separate(region, into = c("chr", "start", "end"))
} else {
count_mat <- peaks_df %>% dplyr::mutate(region = paste(V1, V2, V3, sep = "_")) %>%
dplyr::select(region)
for(i in 1:length(bwL)){
sample_id <- bwL[i] %>% names
sample_path <- bwL[[i]]
sample_res <- summary(sample_path, peaks_gr, type = summary_type) %>%
as.data.frame() %>%
dplyr::mutate(region = paste(seqnames, start, end, sep = "_")) %>%
dplyr::select(region, score) %>%
dplyr::rename(!!sample_id := score)
suppressMessages(count_mat <- dplyr::left_join(count_mat, sample_res, by = "region") %>%
tidyr::separate(region, into = c("chr", "start", "end")))
}
}
return(count_mat)
}
chr21_bw_zip <- system.file("extdata/bw/", "chr21.bw.tar.gz", package = "ALPS", mustWork = TRUE)
## untar into the current working dir under 'test_chr21'
untar(chr21_bw_zip, exdir = "~/Desktop/test_chr21")
chr21_data_table <- system.file("extdata/bw", "ALPS_example_datatable.txt", package = "ALPS", mustWork = TRUE)
chr21_data_table <- read.delim(chr21_data_table, header = TRUE)
chr21_data_table$bw_path <- paste0("~/Desktop/test_chr21/", chr21_data_table$bw_path)
chr21_bed <- system.file("extdata/bw", "ALPS_ACCx_example_GenomicRegions.bed", package = "ALPS", mustWork = TRUE)
chr21_bed <- read.delim(chr21_bed, header = FALSE)
multiBigwig_summary2(data_table = chr21_data_table,
peaks_df = chr21_bed,
summary_type = "mean",
parallel = TRUE) %>% head
library(magrittr)
chr21_bw_zip <- system.file("extdata/bw/", "chr21.bw.tar.gz", package = "ALPS", mustWork = TRUE)
## untar into the current working dir under 'test_chr21'
untar(chr21_bw_zip, exdir = "~/Desktop/test_chr21")
chr21_data_table <- system.file("extdata/bw", "ALPS_example_datatable.txt", package = "ALPS", mustWork = TRUE)
chr21_data_table <- read.delim(chr21_data_table, header = TRUE)
chr21_data_table$bw_path <- paste0("~/Desktop/test_chr21/", chr21_data_table$bw_path)
chr21_bed <- system.file("extdata/bw", "ALPS_ACCx_example_GenomicRegions.bed", package = "ALPS", mustWork = TRUE)
chr21_bed <- read.delim(chr21_bed, header = FALSE)
multiBigwig_summary2(data_table = chr21_data_table,
peaks_df = chr21_bed,
summary_type = "mean",
parallel = TRUE) %>% head
library(ALPS)
ALPS
plot_browser_tracks
q()
devtools::inst("itsvenu/ALPSdata")
devtools::install_github("itsvenu/ALPSdata")
chr21_bw_zip <- system.file("extdata", "chr21.bw.tar.gz", package = "ALPSdata", mustWork = TRUE)
chr21_bw_zip
url <- "https://github.com/itsvenu/ALPSdata/blob/master/inst/extdata/chr21.bw.tar.gz"
untar(url, exdir = "~/Desktop/tt")
q()
q()
q()
q()
q()
q()
q()
remove.packages("ALPSdata")
remove.packages("ALPS")
devtools::document()
devtools::document()
q()
install.packages("ggmuller")
library(ggmuller)
ls()
example_df
example_df %>% head
library(tidyverse)
example_df %>% head
example_edges %>% head
q()
q()
setwd("~/Desktop/ServerView/BRCA/scripts/sigProfiler_pedpancan/signatureAnalysis_XX/signatureExtraction/ExtractWorkFlow")
BiocManager::install("signeR")
BiocManager::install("SomaticSignatures")
mut <- read.table(system.file("extdata","21_breast_cancers.mutations.txt",
package="signeR"), header=TRUE, check.names=FALSE)
mut %>% head
library(tidyverse)
mut <- read.table(system.file("extdata","21_breast_cancers.mutations.txt",
package="signeR"), header=TRUE, check.names=FALSE)
mut %>% head
INPUT <- "~/Desktop/ServerView/BRCA/results/sigProfiler_pedpancan/signatureAnalysis_XX/signatureExtraction/combined_nohyper"
OUTPUT <- "~/Desktop/ServerView/BRCA/results/sigProfiler_pedpancan/signatureAnalysis_XX/signatureExtraction/ExtractionWorkflow"
ppc_snv_mat <- read.delim(paste0(INPUT, "/wgs_snv/output/SBS/wgs_snv.SBS96.all"), header = TRUE)
ppc_snv_mat %>% gead
ppc_snv_mat %>% head
ppc_snv_mat[1] %>% head
colnames(mut) %>% head
colnames(mut) %>% head
colnames(mut)
ppc_snv_mat$MutationType
ppc_snv_mat %>%
tibble::column_to_rownames(var = "MutationType") %>%
t() %>% as.data.frame() %>% head
ppc_snv_mat <- ppc_snv_mat %>%
tibble::column_to_rownames(var = "MutationType") %>%
t() %>% as.data.frame()
View(ppc_snv_mat)
colnames(ppc_snv_mat)
colnames(mut)
ppc_snv_mat %>% colnames()
ppc_snv_mat <- read.delim(paste0(INPUT, "/wgs_snv/output/SBS/wgs_snv.SBS96.all"), header = TRUE)
ppc_snv_mat %>%
dplyr::select(MutationType) %>% head
ppc_snv_mat %>%
dplyr::select(MutationType) %>%
tidyr::separate(MutationType, into = c("fiveBase", "rest"), sep = "[") %>% head
ppc_snv_mat %>%
dplyr::select(MutationType) %>%
tidyr::separate(MutationType, into = c("fiveBase", "rest"), sep = "\\[") %>% head
ppc_snv_mat %>%
dplyr::select(MutationType) %>%
tidyr::separate(MutationType, into = c("fiveBase", "rest"), sep = "\\[") %>%
tidyr::separate(rest, into = c("change", "threeBase"), sep = "\\]") %>% head
ppc_snv_mat %>%
dplyr::select(MutationType) %>%
tidyr::separate(MutationType, into = c("fiveBase", "rest"), sep = "\\[") %>%
tidyr::separate(rest, into = c("change", "threeBase"), sep = "\\]") %>%
dplyr::mutate(changeSplit = change) %>% head
ppc_snv_mat %>%
dplyr::select(MutationType) %>%
tidyr::separate(MutationType, into = c("fiveBase", "rest"), sep = "\\[") %>%
tidyr::separate(rest, into = c("change", "threeBase"), sep = "\\]") %>%
dplyr::mutate(changeSplit = change) %>%
tidyr::separate(changeSplit, into = c("refBase", "altBase"), sep = ">") %>% head
colnames(mut) %>% head
ppc_snv_mat %>%
dplyr::select(MutationType) %>%
tidyr::separate(MutationType, into = c("fiveBase", "rest"), sep = "\\[") %>%
tidyr::separate(rest, into = c("change", "threeBase"), sep = "\\]") %>%
dplyr::mutate(changeSplit = change) %>%
tidyr::separate(changeSplit, into = c("refBase", "altBase"), sep = ">") %>%
dplyr::mutate(mutationType = paste0(change, ":", fiveBase, refBase, threeBase)) %>% head
ppc_snv_mat %>%
dplyr::select(MutationType) %>%
tidyr::separate(MutationType, into = c("fiveBase", "rest"), sep = "\\[") %>%
tidyr::separate(rest, into = c("change", "threeBase"), sep = "\\]") %>%
dplyr::mutate(changeSplit = change) %>%
tidyr::separate(changeSplit, into = c("refBase", "altBase"), sep = ">") %>%
dplyr::mutate(mutationType = paste0(change, ":", fiveBase, refBase, threeBase)) %>%
dplyr::select(mutationType) %>% head
context_format <- ppc_snv_mat %>%
dplyr::select(MutationType) %>%
tidyr::separate(MutationType, into = c("fiveBase", "rest"), sep = "\\[") %>%
tidyr::separate(rest, into = c("change", "threeBase"), sep = "\\]") %>%
dplyr::mutate(changeSplit = change) %>%
tidyr::separate(changeSplit, into = c("refBase", "altBase"), sep = ">") %>%
dplyr::mutate(mutationType = paste0(change, ":", fiveBase, refBase, threeBase)) %>%
dplyr::select(mutationType)
ppc_snv_mat %>%
dplyr::select(-c(MutationType)) %>%
cbind(context_format) %>% head
ppc_snv_mat %>%
dplyr::select(-c(MutationType)) %>%
cbind(context_format) %>%
tibble::column_to_rownames(var = "mutationType") %>% head
ppc_snv_mat %>%
dplyr::select(-c(MutationType)) %>%
cbind(context_format) %>%
tibble::column_to_rownames(var = "mutationType") %>%
t() %>% as.data.frame() %>% head
ppc_snv_mat_format <- ppc_snv_mat %>%
dplyr::select(-c(MutationType)) %>%
cbind(context_format) %>%
tibble::column_to_rownames(var = "mutationType") %>%
t() %>% as.data.frame()
setdiff(colnames(ppc_snv_mat_format), colnames(mut))
colnames(ppc_snv_mat_format)
colnames(mut)
ppc_snv_mat_format %>% head
>signeR::signeR
?signeR::signeR
ppc_snv_mat_format %>%
dplyr::select(one_of(colnames(mut)))
ppc_snv_mat_format <- ppc_snv_mat_format %>%
dplyr::select(one_of(colnames(mut)))
signeR_signatures <- signeR::signeR(M = ppc_snv_mat_format, nlim=c(2,20))
library(signeR)
library(SomaticSignatures)
signeR_signatures <- signeR::signeR(M = ppc_snv_mat_format, nlim=c(2,20))
save.image("sigExtractionWorkFlow.R.RData")
ppc_snv_mat_format %>% head
saveRDS(ppc_snv_mat_format, file = "ppc_snv_mat_format.rds")
?DiffExp
save.image("sigExtractionWorkFlow.R.RData")
DiffExp
q()
library('caret')
data(iris)
formula <- as.formula(Species ~.)
t <- train(formula,iris,method = "rpart",cp=0.002,maxdepth=8)
install.packages("caret")
install.packages("rattle")
library('caret')
data(iris)
formula <- as.formula(Species ~.)
t <- train(formula,iris,method = "rpart",cp=0.002,maxdepth=8)
install.packages("e1071")
t <- train(formula,iris,method = "rpart",cp=0.002,maxdepth=8)
rattle::fancyRpartPlot(t$finalModel)
t$finalModel
formula
setwd("~/Desktop/work/blog/BreastCancer_RandomForest")
dat = read.csv("data.csv", header = TRUE)
dat %>% View()
library(tidyverse)
dat = read.csv("data.csv", header = TRUE)
dat %>% View()
dat <- dat %>%
dplyr::select(-c(X))
dat$diagnosis %>% count()
dat$diagnosis
dat %>%
dplyr::count(diagnosis)
357+212
212/569
357/569
-(0.372 * log2(0.372))
-(0.372 * log2(0.372)) - (0.627 * log2(0.627))
3/4
1/4
-(0.75 * log2(0.75)) - (0.25 * log2(0.25))
-(3/(3+1)) * log2(3/(3+1)) - (1/(3+1)) * log2(1/(3+1))
-(2/(2+1)) * log2(2/(2+1)) - (1/1) * log2(1/1)
-(2/(2+1)) * log2(2/(2+1)) - (1/3) * log2(1/3)
-(1/1) * log2(1/(1)) - (0/1) * log2(0/1)
dim(dat)
dat %>% head
q()
